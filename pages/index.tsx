import type { NextPage } from 'next'
import {useReducer} from 'react'
import type {ChangeEvent} from 'react'
import axios from 'axios'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'

interface initData {
  file: File | null;
  uploading: boolean;
  progress: number | undefined;
  error: string | null;
}

const initialData: initData = {
  file: null,
  uploading: false,
  progress: 0,
  error: ''
}

const ACTIONTYPE = {
  ERROR: 'ERROR',
  CHANGEFILE: 'CHANGEFILE',
  PROGRESS: 'PROGRESS',
  UPLOAD: 'UPLOAD'
  
}

const reducer = (state, action) => {
  switch(action.type) {

      
  case ACTIONTYPE.CHANGEFILE:
      return ({...state, file: action.payload.file});


    case ACTIONTYPE.UPLOAD: 
      return ({...state, uploading: action.payload.upload});


    case ACTIONTYPE.PROGRESS: 
      return ({...state, progress: action.payload.progress})

      
    case ACTIONTYPE.ERROR:
      return ({...state,error: action.payload.err.message});

    default:
      return state;
  }
}

const Home: NextPage = () => {
  const [state, dispatch] = useReducer(reducer, initialData);


  

  const handleFileSubmit = async (e: ChangeEvent<HTMLButtonElement>): void => {
    e.preventDefault();
    const data = new FormData();

    if(!state.file) return

    dispatch({type: ACTIONTYPE.UPLOAD, payload: {upload: true}})

    data.append('file', state.file);

  const config: AxiosRequestConfig = {
    onUploadProgress: (progressEvent) => {
      const progressComplete = Math.round((progressEvent.loaded / progressEvent.total) * 100);

      dispatch({type: ACTIONTYPE.PROGRESS, payload: {progress: progressComplete}})
    }
  }

    try {
      const res = await axios.post('/api/video', data, config);
      console.log(res.data)
      
    }
    catch(err) {
      dispatch({type: ACTIONTYPE.ERROR, payload: {err}})
      console.error(err);
    }
    finally {
      dispatch({type: ACTIONTYPE.UPLOAD, payload: {upload: false}});
      dispatch({type: ACTIONTYPE.PROGRESS, payload: {pro: false}})
    }
    
    
  }

  const handleSetFile = (e: React.ChangeEvent<HTMLInputElement>): void => {

    const files = e.target.files;

    if(files?.length) {
      dispatch({type: ACTIONTYPE.CHANGEFILE, payload: {file: files[0]}});
    }
  }
  
  return (
    <div className={styles.container} style={{    background: '#12013a',
    height: '100vh', color: '#fff'}}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {state.error && <p>{state.error}</p>}
        {state.uploading && <h2>{state.progress}%</h2>}
        <form>
          <label htmlFor='file'>File</label>
          <input type='file' id='file' accept='video/*' onChange={handleSetFile} />

          <button onClick={handleFileSubmit}>upload</button>
          
        </form>
      </main>

      
    </div>
  )
}

export default Home
